
plugins {
    id 'com.github.johnrengelman.shadow' version '5.0.0'
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "1.3.61"
    id 'me.qoomon.git-versioning' version '1.2.1'
}
ext{
    kotlin_version ="1.3.61"
    mc_version = '1.14-R0.1-SNAPSHOT'
    bc_version ='1.12-SNAPSHOT'
}

allprojects{
    group = 'cf.wayzer'
    repositories {
        maven{ url "http://maven.aliyun.com/nexus/content/groups/public/"}
        jcenter()
        mavenCentral()
        maven {
            url = "https://hub.spigotmc.org/nexus/content/groups/public/"
        }
        maven {
            url  "https://dl.bintray.com/way-zer/maven"
        }
    }
}
shadowJar {
//    minimize()
    configurations = [project.configurations.shadow]
    relocate("me.dpohvar.powernbt.api","cf.wayzer.util.nbt")
    relocate("me.dpohvar.powernbt.nbt","cf.wayzer.util.nbt.nbt")
    relocate("me.dpohvar.powernbt.utils","cf.wayzer.util.nbt.utils")
    relocate("me.dpohvar.powernbt.exception","cf.wayzer.util.nbt.exception")
//    exclude("me/**")
//    exclude("example/**")
//    exclude("(?!plugin).yml")
    include("*.jar")
    //for NBT
    include("me/dpohvar/powernbt/api/**")
    include("me/dpohvar/powernbt/utils/**")
    include("me/dpohvar/powernbt/nbt/**")
    include("me/dpohvar/powernbt/exception/**")

    include("cf/wayzer/**")
    include("*.kts")
    include("META-INF/**")
    include("plugin.yml")
}


//start

dependencies{
    shadow 'cf.wayzer:LibraryManager:1.3.2'
    shadow(files("$rootDir/lib/PowerNBT.jar"))
    compile "org.jetbrains.kotlin:kotlin-script-util:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-scripting-jvm-host:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    compileOnly "org.spigotmc:spigot-api:$mc_version"
    compileOnly "net.md-5:bungeecord-chat:$bc_version"
//    compile "me.dpohvar.powernbt:PowerNBT:0.8.9.2"
}
version "1.3-SNAPSHOT"
gitVersioning{
    tag {
        pattern = 'v(?<tagVersion>[0-9].*)'
        versionFormat = '${tagVersion}'
    }
    commit {
        versionFormat = '${version}-${commit.short}'
    }
}
processResources{
    filesMatching(["plugin.yml","bungee.yml"]){
        filter{
            it.replace("@version@", version.toString())
        }
    }
}
def items = subprojects.first()
task buildArtifact(type: Zip){
    dependsOn items.getTasksByName("classes",false)
    dependsOn shadowJar
    from(file(items.buildDir.path+"/classes/kotlin/")){
        includeEmptyDirs = false
        include "**/*.class"
        into("items")
    }
//    from(jar.getArchiveFile()){
//        rename(".jar","-developLib.jar")
//    }
    from("Scripts")
    from(shadowJar.getArchiveFile()){
        rename("-all","")
    }
    archiveFileName = "SuperItem-${rootProject.version}.zip"
    destinationDirectory =file("$rootDir/artifacts/")
}

task develCopy(type: Copy){
    dependsOn shadowJar
    from(shadowJar.getArchiveFile()){
        rename("-all","")
    }
    into "F:\\minecraft\\RogInkTestServer\\plugins"
}
